// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskPlanner.Entity;

namespace TaskPlanner.Migrations
{
    [DbContext(typeof(TaskPlannerEntities))]
    [Migration("20181122035214_TaskPlanner")]
    partial class TaskPlanner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TaskPlanner.Entity.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetRoleId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetRoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AspNetRoleId");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AspNetRoleId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUserId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId");

                    b.HasKey("ProviderKey");

                    b.HasIndex("AspNetUserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleId");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Epic", b =>
                {
                    b.Property<int>("EpicId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EpicName");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProjectId");

                    b.HasKey("EpicId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Epics");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Favourite", b =>
                {
                    b.Property<int>("FavouriteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUserId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserId");

                    b.HasKey("FavouriteId");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PriorityName");

                    b.Property<int>("SortOrder");

                    b.HasKey("PriorityId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsOpenPermission");

                    b.Property<string>("Owner");

                    b.Property<string>("ProjectName");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Owner");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TaskPlanner.Entity.ProjectPermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("PermissionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPermission");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Story", b =>
                {
                    b.Property<int>("StoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssigneeName");

                    b.Property<int?>("Benefit");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("EpicId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Milestone");

                    b.Property<int?>("Penality");

                    b.Property<int?>("PriorityId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Release");

                    b.Property<int?>("SortOrder");

                    b.Property<string>("SprintName");

                    b.Property<string>("Status");

                    b.Property<decimal?>("StoryPoints");

                    b.Property<string>("Tag");

                    b.Property<int?>("TaskId");

                    b.Property<int?>("ThemeId");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("StoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EpicId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProjectId");

                    b.Property<string>("ThemeName");

                    b.HasKey("ThemeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetRoleClaim", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetRole", "AspNetRole")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("AspNetRoleId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUser", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetRole")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("AspNetRoleId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUserClaim", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.AspNetUserLogin", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Epic", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany("Epics")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_EpicCreatedBy");

                    b.HasOne("TaskPlanner.Entity.Project", "Project")
                        .WithMany("Epics")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_EpicProjectId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Favourite", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany("Favourites")
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("TaskPlanner.Entity.Project", "Project")
                        .WithMany("Favourites")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_FavouriteProjectId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Priority", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany("Priorities")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_PriorityCreatedBy");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Project", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany("Projects")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_ProjectCreatedBy");

                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser1")
                        .WithMany("Projects1")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_ProjectOwner");
                });

            modelBuilder.Entity("TaskPlanner.Entity.ProjectPermission", b =>
                {
                    b.HasOne("TaskPlanner.Entity.Project", "Project")
                        .WithMany("ProjectPermissions")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectPermissionProjectId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Story", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany("Stories")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_StoryCreatedBy");

                    b.HasOne("TaskPlanner.Entity.Epic", "Epic")
                        .WithMany("Stories")
                        .HasForeignKey("EpicId")
                        .HasConstraintName("FK_StoryEpicId");

                    b.HasOne("TaskPlanner.Entity.Priority", "Priority")
                        .WithMany("Stories")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_StoryPriorityId");

                    b.HasOne("TaskPlanner.Entity.Project", "Project")
                        .WithMany("Stories")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_StoryProjectId");

                    b.HasOne("TaskPlanner.Entity.Theme", "Theme")
                        .WithMany("Stories")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK_StoryThemeId");
                });

            modelBuilder.Entity("TaskPlanner.Entity.Theme", b =>
                {
                    b.HasOne("TaskPlanner.Entity.AspNetUser", "AspNetUser")
                        .WithMany("Themes")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_ThemesCreatedBy");

                    b.HasOne("TaskPlanner.Entity.Project", "Project")
                        .WithMany("Themes")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ThemesProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
